---

# Initialise the packages repository to a standard,
# including backports, contrib and non-free software
- name: Store the sections list
  ansible.builtin.set_fact:
    sections: '{{ system.apt.sections | join(" ") }}'

- name: Check if apt mirror is valid
  register: mirror
  ansible.builtin.uri:
    url: http://{{ system.apt.mirror }}/debian/dists/{{ distribution_release }}/Release
    return_content: true
  loop:
    - "{{ system.release }}"
    - "{{ system.release }}-updates"
    - "{{ system.release }}-backports"
  loop_control:
    loop_var: distribution_release

- name: Initialise default repositories
  register: repositories
  ansible.builtin.template:
    src: sources.list
    dest: /etc/apt/sources.list
    mode: '0644'

- name: Find all third party repositories
  register: tp_repositories_found
  ansible.builtin.find:
    path: /etc/apt/sources.list.d

- name: Comment out third party repositories
  register: tp_repositories
  ansible.builtin.replace:
    path: '{{ file.path }}'
    regexp: '^deb (.*)'
    replace: '# deb \1'
  loop: '{{ tp_repositories_found.files }}'
  loop_control:
    loop_var: file

# Some cloud providers, the cache_valid_time condition
# is not working just after the installation (vultr)
- name: Force the packages cache update on the first installation
  when: repositories.changed
  register: packages_cache
  ansible.builtin.apt:
    update_cache: true

- name: Disable recommended and suggested packages
  ansible.builtin.template:
    src: extra-packages.conf
    dest: /etc/apt/90extra
    mode: '0644'

- name: Upgrade the distribution
  when: packages_cache.changed
  ansible.builtin.apt:
    upgrade: safe
